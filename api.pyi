from _typeshed import NoneType
from datetime import datetime
from typing import Union, Optional, List, Tuple, Set, Any
from requests.models import Response
from .xyz import (
    Object,
    TimestampedObject,
    GDPSStats,
    GDPSLinks,
    GDPSImages,
    Locale,
    VoteType,
    SessionIPs
)

_authorization: Union[Session, NoneType] = ...

def _raise_for_errors(r: Response = ..., exc_of: Union[List[int], Tuple[int], Set[int]] = ()): ...

def _auth_required(req: function): ...

class Session(Object):
    def __init__(self, token_session: dict = ...):
        self.token: str = ...
        self.refresh_token: str = ...
        self.token_expiration: int = ...
        self.refresh_token_expiration: int = ...
    def __repr__(self) -> str: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any = ..., exc_val: Any = ..., exc_tb: Any = ...): ...
    @property
    def token_expiration_dt(self) -> datetime: ...
    @property
    def refresh_token_expiration_dt(self) -> datetime: ...
    @property
    def info(self) -> SessionInfo: ...
    def sessions(self, page: int = ...) -> List[SessionInfo]: ...
    def refresh(self) -> None: ...
    def close(self) -> None: ...
    def init(self) -> None: ...

class SessionInfo(TimestampedObject):
    def __init__(self, session: dict = ...):
        self.refresh_count: int = ...
    def __repr__(self) -> str: ...
    @property
    def ips(self) -> SessionIPs: ...


class Account(TimestampedObject):
    def __init__(self, account: dict = ...):
        self.permission_level: int = ...
        self.username: str = ...
        self.avatar_url: str = ...
    def __repr__(self) -> str: ...

class MyAccount(Account):
    def __init__(self, account: dict = ...): ...
    @property
    def email(self) -> Optional[str]: ...
    @staticmethod
    @_auth_required
    def gdpslist(page: int) -> List[GDPS]: ...
    @staticmethod
    @_auth_required
    def update(
        *,
        email: str = None,
        password: str = None,
        avatar_url: str = None,
        username: str = None
    ) -> None: ...
    @staticmethod
    @_auth_required
    def delete() -> None: ...

class Comment(TimestampedObject):
    def __init__(self, comment: dict = ...):
        self.gdps_id: int = ...
        self.text: str = ...
        self.content: str = ...
    def __repr__(self) -> str: ...
    @property
    def author(self) -> Account: ...
    @property
    def stats(self) -> GDPSStats: ...
    @_auth_required
    def update(self, text: str = ...): ...
    @_auth_required
    def delete(self): ...
    @_auth_required
    def vote(self, vote_type: Union[int, VoteType] = ...): ...
    @_auth_required
    def unvote(self): ...


class GDPS(TimestampedObject):
    def __init__(self, gdps: dict = ...):
        self.is_pre_moderated: bool = ...
        self.is_verified: bool = ...
        self.locale: str = ...
        self.name: str = ...
        self.desc: Optional[str] = ...
    def __repr__(self) -> str: ...
    @property
    def images(self) -> GDPSImages: ...
    @property
    def owner(self) -> Account: ...
    @property
    def links(self) -> GDPSLinks: ...
    @property
    def stats(self) -> GDPSStats: ...
    def get_comment(self, comment_id: int = ..., /) -> Comment: ...
    @_auth_required
    def create_comment(self, text: str = ...): ...
    def get_comment_page(self, page: int = ..., /) -> List[Comment]: ...
    @_auth_required
    def update(
        self,
        *,
        name: str = ...,
        desc: str = ...,
        link: str = ...,
        dashboard_link: str = ...,
        download_windows: str = ...,
        download_android: str = ...,
        locale: Union[Locale, str] = ...,
        avatar_url: str = ...,
        background_url: str = ...
    ): ...
    @_auth_required
    def delete(self): ...
    @_auth_required
    def vote(self, vote_type: Union[VoteType, int] = ...): ...
    @_auth_required
    def unvote(self): ...


def get_account(account_id: int = ..., /) -> Account: ...

@_auth_required
def me() -> MyAccount: ...

def register(username: str = ..., email: str = ..., password: str = ...) -> int: ...

def activate(email: str = ..., key: int = ...): ...

def authorize(email: str = ..., password: str = ...) -> Session: ...

def send_email_key(email: str = ...): ...

def change_password(email: str = ..., key: int = ..., new_password: str = ...): ...

def get_gdps(gdps_id: int = ..., /) -> GDPS: ...

@_auth_required
def create_gdps(
    name: str = ...,
    desc: str = ...,
    link: str = ...,
    *,
    avatar_url: str = ...,
    background_url: str = ...
) -> int: ...

def search_for_gdps(query: str = ..., page: int = ...) -> List[GDPS]: ...

def top() -> List[GDPS]: ...